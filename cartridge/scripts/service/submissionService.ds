importPackage( dw.system );
importPackage( dw.object );
importPackage( dw.util );
importScript( "dao/configuration.ds" );
importScript( "dao/submission.ds");
importScript( "file_api/qordobaFileApi.ds" );
importScript( "file_api/httpUtils.ds" );
importScript( "service/localeService.ds" );
importScript( "service/progressService.ds" );
importScript( "/utils/ExceptionLog.ds" );

var LOGGER : ExceptionLog = new ExceptionLog(Logger.getLogger("qordoba", "submissionService"));
var LAST_MODIFIED_RESPONSE_FORMAT = "yyyy-MM-dd'T'HH:mm:ss";
var STATUS_IN_PROGRESS: String = "in progress";

/**
    Go through submissions and request downloading completed
*/
function filterSubmissionsWithFullProgressWithSameFileUri(submissions :List): List {
    var result: List = new ArrayList();
    if (!submissions.isEmpty()) {
        try {
            var localeSubmission: Map = new HashMap();
            var statuses = getStatus(submissions.get(0));
            var totalStringCount = statuses['totalStringCount'];
            var itemsStatuses = statuses['items'];
            if (itemsStatuses!= null) {
                for each (var submission : CustomObject in submissions) {
                    localeSubmission.put(submission.custom['locale'], submission);
                }

                for each (var status: Object in itemsStatuses){
                    var locale = status['localeId'];
                    var completedStringCount = status['completedStringCount'];
                    var authorizedStringCount = status['authorizedStringCount'];
                    var excludedStringCount = status['excludedStringCount'];
                    var submission: CustomObject = localeSubmission.get(getClientLocale(locale));

                    if (submission!= null) {
                        var progress = calculateProgress(completedStringCount, authorizedStringCount, excludedStringCount, totalStringCount);
                        updateProgress(submission, progress);

                        if (progress == 100) {
                            LOGGER.info("Submission {0} has been translated completely and will be downloaded [projectId={1}]",
                                submissionToString(submission), getProjectId());
                            result.add(submission);
                        } else {
                            setSubmissionStatusInProgress(submission);
                        }
                    }
                }
            }
        } catch (e) {
            if (e instanceof QordobaFileNotFoundError) {
                LOGGER.warn("fileUri not found in dashboard, marking submissions as failed\n{0}", submissionsToString(submissions));
                for each (var submission : CustomObject in submissions) {
                    setSubmissionStatusFailed(submission);
                }
            } else {
                throw e;
            }
        }
    }
    return result;
}

/**
    Go through submissions and find updated translations (by last modified timestamp)
*/
function filterOutdatedSubmissionsWithSameFileUri(submissions: List): List {
    var result: List = new ArrayList();
    if (!submissions.isEmpty()){
        try {
            var localeSubmissions: Map = new HashMap();
            var lastModified = getLastModified(submissions.get(0));
            if (lastModified != null) {
                for each( var submission : CustomObject in submissions) {
                    localeSubmissions.put(submission.custom['locale'], submission);
                }

                for each (var localeObject : Object in lastModified) {
                    var submission : CustomObject = localeSubmissions.get(getClientLocale(localeObject['locale']));
                    if (submission != null){
                        var submissionLastModified: Calendar = new Calendar(new Date(submission.custom['qordobaLastModified']));
                        var localeLastModified: Calendar = new Calendar();
                        localeLastModified.parseByFormat(localeObject['lastModified'], LAST_MODIFIED_RESPONSE_FORMAT);

                        if (submissionLastModified.before(localeLastModified)
                            || (STATUS_IN_PROGRESS.equals(submission.custom['status']) && submission.custom['progress'] == 100)) {
                                LOGGER.info('Translation for submission with fileUri="{0}" and locale={1} has been updated or in inconsistant state [projectId={2}]',
                                    submission.custom['fileUri'], submission.custom['locale'], getProjectId());
                            result.add(submission);
                        }
                        updateQordobaLastModified(submission, localeLastModified.getTime().toUTCString());
                    }
                }
            }
        } catch (e) {
            var exception = e;
            if (e instanceof QordobaFileNotFoundError) {
                LOGGER.warn("fileUri not found in dashboard, marking submissions as failed\n{0}", submissionsToString(submissions));
                for each (var submission : CustomObject in submissions) {
                    setSubmissionStatusFailed(submission);
                }
            } else {
                throw e;
            }
        }
    }
    return result;
}

/**
    Get qordoba status for all locales
*/
function getStatus(submission: CustomObject): JSON {
    LOGGER.debug('Querying file status for fileUri="{0}"', submission.custom['fileUri']);
    var statusResponse = fileStatus(submission.custom['fileUri']);
    if (isSuccessfulResponse(statusResponse)){
        var jsonResponse = parseResponse(statusResponse);
        return jsonResponse['response']['data'];
    } else {
        return null;
    }
}

/**
    Get qordoba last modified timestamp for all locales
*/
function getLastModified(submission: CustomObject): JSON {
    LOGGER.debug('Querying lastModified for fileUri="{0}"', submission.custom['fileUri']);
    var lastModifiedResponse = lastModified(submission.custom['fileUri']);
    if (isSuccessfulResponse(lastModifiedResponse)){
        var jsonResponse = parseResponse(lastModifiedResponse);
        return jsonResponse['response']['data']['items'];
    } else {
        return null;
    }
}

/**
    Convert submissions collection to string
*/
function submissionsToString(submissions: Collection) {
    var collection = "[\n";
    for each (var submission:CustomObject in submissions ){
        collection += submissionToString(submission) + "\n";
    }
    collection+="]";
    return collection;
}
