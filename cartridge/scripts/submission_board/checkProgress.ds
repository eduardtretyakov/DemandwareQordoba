/**
*   @input uuid : String
*   @output progress : Number
*
*/
importPackage( dw.system );
importPackage( dw.object );
importPackage( dw.net );
importPackage( dw.crypto );
importScript( "/helpFunctions.ds" );
importScript( "/dao/configuration.ds");
importScript( "/dao/submission.ds");
importScript( "/utils/ExceptionLog.ds" );

var LOGGER : ExceptionLog = new ExceptionLog(Logger.getLogger("qordoba", "submissionBoard.checkProgress"));
var version = require("~/cartridge/scripts/version");
var qordobaFileApi = require("~/cartridge/scripts/file_api/qordobaFileApi.ds");	

function IsJson(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}

/**
    Query the qordoba API for all in process translations to retrieve the translation complete percentage
    write this status into the custom object for inclusion on the display.
*/
function execute( pdict : PipelineDictionary ) : Number
{
    try {
        var qordobaConfigurationJson : JSON = getConfiguration();    	
        var submission : CustomObject = getSubmissionByUuid(pdict.uuid);
        var progress : Number = submission.custom['progress'];

        if (submission.custom['status'] == "in progress") {            
		    var auth : HTTPClient = qordobaFileApi.checkConnection(qordobaConfigurationJson['api_url'], 
		    	qordobaConfigurationJson['login'],
		     	qordobaConfigurationJson['password']);
			
			var authResp = JSON.parse(auth.text);
			var authToken : String = '';
			if(authResp['result'] && authResp['result'] == 'success') {
				authToken = authResp['token'];
			} 		                  

			/* LOGGER.error("Retrieving languages");
			
			https://app.qordoba.com/api/languages			
			//-----------------------------------
            var httpClient : HTTPClient = new HTTPClient();
            httpClient.setTimeout(qordobaConfigurationJson['time_out']); 
            httpClient.open('GET', qordobaConfigurationJson['api_url'] + 'languages');
            httpClient.setRequestHeader("User-Agent", "demandware-connector/" + version.getVersion());
	        httpClient.setRequestHeader('X-AUTH-TOKEN', authToken);
            httpClient.send(request);
            
            if (httpClient.statusCode == 200) {
				            
            } else {
                LOGGER.error('retrieving langs failed: statusCode={0}, errorText="{1}"', httpClient.statusCode, httpClient.errorText);
                return PIPELET_ERROR;
            }
				        
        
			LOGGER.error("Langs retrieved {0}", httpClient.text);
			var languages : Object = JSON.parse(httpClient.text); */
			
			LOGGER.error("Retrieving project data");
			
			https://app.qordoba.com/api/projects/3693		
			//-----------------------------------
            var httpClient : HTTPClient = new HTTPClient();
            httpClient.setTimeout(qordobaConfigurationJson['time_out']); 
            httpClient.open('GET', qordobaConfigurationJson['api_url'] + 'projects/' + qordobaConfigurationJson['project_id']);
            httpClient.setRequestHeader("User-Agent", "demandware-connector/" + version.getVersion());
	        httpClient.setRequestHeader('X-AUTH-TOKEN', authToken);
            httpClient.send(request);
            
            if (httpClient.statusCode == 200) { 
				LOGGER.error("project data retrieved {0}, {1}", qordobaConfigurationJson['api_url'] + 'projects/' + qordobaConfigurationJson['projectId'], httpClient.text);
				var projectData : Object = JSON.parse(httpClient.text);
            } else {
                LOGGER.error('retrieving project data failed: URL={0}, statusCode={1}, errorText="{2}"', qordobaConfigurationJson['api_url'] + 'projects/' + qordobaConfigurationJson['projectId'], httpClient.statusCode, httpClient.errorText);
                return PIPELET_ERROR;
            }
			
			var localeUrl : String = "";
			var langId : Number = null;
	        var delimiter : String = getDelimiter();
	        var request : String = '{"status": ["completed"]}';				
			var checkNumber = 100 / submission.custom['qordobaLocale'].length;
			var progress : Number = 0;
			
			for(var lang in submission.custom['qordobaLocale']) {
				for(var remoteLang in projectData.project['target_languages']) {
					if(projectData.project['target_languages'][remoteLang].code == submission.custom['qordobaLocale'][lang]) {
						langId = projectData.project['target_languages'][remoteLang].id;
						break; 
					}
				}
				
				if(langId == null) {
	                LOGGER.error('Remote Locale not found: {0}', submission.custom['qordobaLocale'][lang]);				
				}
				
				localeUrl = qordobaConfigurationJson['api_url'] + 'projects/' +
				qordobaConfigurationJson['project_id'] + '/languages/' + 
				langId + '/page_settings/search?limit=50&offset=0';
				
                LOGGER.error('Locale check: {0}', localeUrl);                
                
    			//https://app.qordoba.com/api/projects/3693/languages/234/page_settings/search?limit=50&offset=0
    			//body:{"status": ["completed"]}
				//-----------------------------------
        		var httpClient : HTTPClient = getHttpClient(delimiter, request , request.length);
	            httpClient.setTimeout(qordobaConfigurationJson['time_out']); 
	            httpClient.open('POST',localeUrl);
	            
	            httpClient.setRequestHeader("User-Agent", "demandware-connector/" + version.getVersion());
		        httpClient.setRequestHeader('Content-Type', 'application/json');
		        httpClient.setRequestHeader('X-AUTH-TOKEN', authToken);
	            httpClient.send(request); 
	            
	            if (httpClient.statusCode == 200) { 
					var langPages : Object = JSON.parse(httpClient.text);
					if(langPages.pages.length > 0) {
						progress = progress + checkNumber;
					}
					
					LOGGER.error("Page Search sata retrieved {0}, {1}, {2}, {3}", localeUrl, httpClient.text, langPages.pages.length, progress);
	            } else {
	                LOGGER.error('retrieving Search data failed: URL={0}, statusCode={1}, errorText="{2}"', localeUrl, httpClient.statusCode, httpClient.errorText);
	                return PIPELET_ERROR;
	            }
                langId = null;
			}		
			
            /*LOGGER.info('Sending check progress request for itemType={0}, itemId={1}, fileUri="{2}", locale={3}', submission.custom['itemType'], submission.custom['itemId'], submission.custom['fileUri'], submission.custom['locale']);

            var httpClient : HTTPClient = new HTTPClient();
            httpClient.setTimeout(qordobaConfigurationJson['time_out']);
            httpClient.open('GET', getApiUrl() + '/file/status?' + request);
            httpClient.setRequestHeader("User-Agent", "demandware-connector/" + version.getVersion());
            httpClient.send(request);

            if (httpClient.statusCode == 200) {
                var message = httpClient.text;
                if(IsJson(message)) {
	                var messageJson : JSON = JSON.parse(message);
	
	                if (messageJson['response']['data']['completedStringCount'] != 0) {
	                    progress = messageJson['response']['data']['completedStringCount']/ messageJson['response']['data']['approvedStringCount'] * 100;
	                }
	
	                if (progress && progress != submission.custom['progress'])
	                {
	                    updateProgress(submission, progress);
	                }
                } else {
                	progress = 0;
                }
            } else {
                LOGGER.error('Checking progress failed: statusCode={0}, errorText="{1}"', httpClient.statusCode, httpClient.errorText);
            } */
        }
		LOGGER.error("Progress {0}", progress);        
    } catch (e) {
        LOGGER.errorException("submissionBoard.download execution failed for uuid={0}", pdict.uuid, e);
    }
    pdict.progress = progress;

    return PIPELET_NEXT;
}

function getSubmissionByUuid(uuid : String) : CustomObject
{
    return CustomObjectMgr.queryCustomObject("QORDOBA_SUBMISSION", "UUID = '" + uuid + "'");
}